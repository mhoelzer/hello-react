{"version":3,"sources":["Text.jsx","App.js","serviceWorker.js","index.js","giffyGif.gif"],"names":["Text","react_default","a","createElement","style","color","this","props","border","value","Component","App","className","src","logo","alt","href","target","rel","src_Text","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAwBeA,0LATP,OAGIC,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAAEC,MAAOC,KAAKC,MAAMF,MAAOG,OAAQF,KAAKC,MAAMC,SAAWF,KAAKC,MAAME,MAAjF,YAbOC,cC2BJC,mLAtBX,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAChBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCd,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KAAGS,UAAU,WAAWI,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAvE,eAGAjB,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAACgB,EAAD,CAAMV,MAAM,WAAWJ,MAAM,SAASG,OAAO,yBAGxDP,EAAAC,EAAAC,cAACgB,EAAD,CAAMV,MAAM,SAASJ,MAAM,QAA3B,oBAfQK,aCIEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.bc92b504.chunk.js","sourcesContent":["// You can also name it Text.js; .jsx extension signals that what lies within is a react component with JSX syntax; some text editors will provide better syntax highlighting with the .jsx extension.\n\n// import/export is new feature in js (new and importevd), not just react; part of regular js syntax dont see often because browsers dont support syntax much yet; create-react-app will convert points from import statements so this code can run in the broswer\nimport React, { Component } from 'react';\n\nclass Text extends Component {\n    // // dont really need this here b/c not doing anything different than what deaulf is doing, which looks exactyly like this; if doing more than this, have this and w/e else\n    // constructor(props) {\n    //     // super calls constructor of parent/component class; in prototype, would component.callthis(); in class, do super and dont need call and this and parent; the options are called props here \n    //     super(props);\n    // }\n    // instruction set of how to look when renders\n    // lifecycle method (declarative; react controls lifecycle and we write instructions on how behaves)\n    // section that text component creates; could be used in any other component like it's own html tag; create 1 comp to uuse in another by composing \n    render() {\n        return (\n            // need js obj w/ scc rulse ; innerset is for js obj,. and second set is for where put js code; when inside jsx delinate wher put js like ${ inside `; js is inside the curlies }\n            // this is from the paticular instance of text comp and is used in the other file; once constructor runs, it makes new obj that is comp instance and react handles that object but htis is how it sould look; react makes instance\n            <span style={{ color: this.props.color, border: this.props.border }}>{this.props.value}!</span>\n                // span keeps it on the same line when it's inside another part of code, but anything else puts it on another \n        )\n    }\n}\n\nexport default Text; // --> to help import","// in node js, it would be require/module.exports (if someone else requires package, the stuff inside would be all the methods and when person imports, it would be the const package = req(\"ekr\") then package.methdo() and yadayada); the pairs here are iport/export \nimport React, { Component } from 'react'; // base class from react library; this is importing certain parts of the module; runtime that react will run from this file\nimport ReactDOM from 'react-dom';\nimport logo from './giffyGif.gif';\nimport './App.css';\nimport Text from \"./Text.jsx\";\n\n// with class syntax expand from component class, like grid class; class App is var name that can be used anywhere \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">Learn React</a>\n          \n          {/* values on attributes become props inside the component/render, and the props get used for things like styling */}\n          <h1>Hello, <Text value=\"Michelle\" color=\"orange\" border=\"20px dotted magenta\"/></h1>\n          \n          {/* these are their own obj */}\n          <Text value=\"eosfnb\" color=\"pink\">testing</Text>\n        </header>\n      </div>\n    );\n  }\n}\n\n// import and export are pairs; ES6 module syntax\n// export defaultl when importing, do the import Module from './filename' in some other file\nexport default App;\n\n\n\n\n\n// DOING WORK WITH FUNCTIONAL COMPONENTS \n// if do this, comment out --> import Text from \"./Text.jsx\"; and add in --> import ReactDOM from 'react-dom';\n// function Text(props) {\n//   return (\n//       <div className={Text + props.color}>{props.value}!</div>\n//   )\n// };\n// function App() {\n//   return (\n//     <Text color=\"orange\" value=\"hsbefk\">\n//       <h1 className=\"Testing\">Hello</h1>\n//     </Text>\n//   )\n// };\n// ReactDOM.render(<App/>, document.getElementById(\"root\"));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/giffyGif.d5963c6f.gif\";"],"sourceRoot":""}